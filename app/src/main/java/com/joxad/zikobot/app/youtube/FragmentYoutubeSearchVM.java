package com.joxad.zikobot.app.youtube;

import android.content.Context;
import android.databinding.Bindable;
import android.databinding.ObservableArrayList;
import android.util.Log;

import com.google.api.client.http.HttpRequest;
import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.youtube.YouTube;
import com.google.api.services.youtube.model.SearchListResponse;
import com.google.api.services.youtube.model.SearchResult;
import com.joxad.easydatabinding.fragment.v4.FragmentBaseVM;
import com.joxad.zikobot.app.BR;
import com.joxad.zikobot.app.R;
import com.joxad.zikobot.app.databinding.FragmentYoutubeSearchBinding;
import com.joxad.zikobot.app.search.SearchManager;
import com.joxad.zikobot.data.event.search.EventQueryChange;
import com.joxad.zikobot.data.module.youtube.VideoItem;
import com.orhanobut.logger.Logger;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import me.tatarka.bindingcollectionadapter.ItemView;
import rx.Observable;
import rx.Subscription;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

/**
 * Generated by generator-android-template
 */
public class FragmentYoutubeSearchVM extends FragmentBaseVM<FragmentYoutubeSearch, FragmentYoutubeSearchBinding> {

    public ItemView itemViewYoutube = ItemView.of(BR.youtubeItemVM, R.layout.item_youtube);
    public ObservableArrayList<YoutubeItemVM> youtubeItemVMs;
    private Subscription youtubeSubscription;
    private YoutubeConnector yc;

    /***
     * @param fragment
     * @param binding
     */
    public FragmentYoutubeSearchVM(FragmentYoutubeSearch fragment, FragmentYoutubeSearchBinding binding) {
        super(fragment, binding);
    }

    @Override
    public void onCreate() {
        youtubeItemVMs = new ObservableArrayList<>();
        yc = new YoutubeConnector(fragment.getContext());

    }


    @Override
    public void onResume() {
        super.onResume();
        EventBus.getDefault().register(this);
        query(SearchManager.QUERY);
    }


    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onReceive(EventQueryChange event) {
        query(event.getQuery());
    }

    @Override
    public void onPause() {
        super.onPause();
        EventBus.getDefault().unregister(this);
    }

    public void query(final String query) {
        youtubeItemVMs.clear();
        youtubeSubscription = yc.queryObservable(query).subscribe(videoItems -> {
            for (VideoItem videoItem : videoItems) {
                youtubeItemVMs.add(new YoutubeItemVM(fragment.getContext(), videoItem));
            }
        }, throwable -> {
            Logger.e(throwable.getMessage());
        });
    }

    class YoutubeConnector {
        private YouTube youtube;
        private YouTube.Search.List query;

        // Your developer key goes here
        public static final String KEY
                = "AIzaSyBFCKu0kRnhluh4_BIXOzXgUUk8v66_6yg";

        public YoutubeConnector(Context context) {
            youtube = new YouTube.Builder(new NetHttpTransport(),
                    new JacksonFactory(), new HttpRequestInitializer() {
                @Override
                public void initialize(HttpRequest hr) throws IOException {
                }
            }).setApplicationName(context.getString(R.string.app_name)).build();

            try {
                query = youtube.search().list("id,snippet");
                query.setKey(KEY);
                query.setMaxResults(50L);
                query.setType("video");
                query.setFields("items(id/videoId,snippet/title,snippet/description,snippet/thumbnails/default/url)");
            } catch (IOException e) {
                Log.d("YC", "Could not initialize: " + e);
            }
        }

        public Observable<List<VideoItem>> queryObservable(String keywords) {
            return Observable.fromCallable(() -> query(keywords))
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribeOn(Schedulers.io())
                    .unsubscribeOn(Schedulers.io());
        }

        public List<VideoItem> query(String keywords) {
            query.setQ(keywords);
            try {
                SearchListResponse response = query.execute();
                List<SearchResult> results = response.getItems();

                List<VideoItem> items = new ArrayList<VideoItem>();
                for (SearchResult result : results) {
                    VideoItem item = new VideoItem();
                    item.setTitle(result.getSnippet().getTitle());
                    item.setDescription(result.getSnippet().getDescription());
                    item.setThumbnailURL(result.getSnippet().getThumbnails().getDefault().getUrl());
                    item.setId(result.getId().getVideoId());
                    items.add(item);
                }
                return items;
            } catch (IOException e) {
                Log.d("YC", "Could not search: " + e);
                return null;
            }


        }
    }

    @Bindable
    public boolean getShowNoResult() {
        return SearchManager.QUERY.length() > 2 && youtubeItemVMs.isEmpty();
    }
}

